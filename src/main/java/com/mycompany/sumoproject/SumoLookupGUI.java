package com.mycompany.sumoproject;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import com.mycompany.Tables.BanzDraftTbl;
import java.sql.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import com.mycompany.DraftHandler.DraftHandler;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author blarg
 */
public class SumoLookupGUI extends javax.swing.JFrame {

    /**
     * Creates new form SumoLookupGUI
     */
    public SumoLookupGUI() {
        String server = "NOTTAMACK\\SQLEXPRESS";
        String databaseName = "TutorialDB";
        

        String connectionUrl = "jdbc:sqlserver://"
                + "%s;".formatted(server)
                + "databaseName=%s;".formatted(databaseName)
                + "trustServerCertificate=true;"
                + "integratedSecurity=true;";

        try {
            connection = DriverManager.getConnection(connectionUrl);
            statement = connection.createStatement();
        } catch (SQLException e) {
            System.exit(-1);
        }

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        draftDialog = new javax.swing.JDialog();
        draftsPane = new javax.swing.JScrollPane();
        draftersListOrder = new javax.swing.JList<>();
        draftActionScroll = new javax.swing.JScrollPane();
        draftActionList = new javax.swing.JTextArea();
        draftReset = new javax.swing.JButton();
        draftSelectBut = new javax.swing.JButton();
        draftCurrDrafterLbl = new javax.swing.JLabel();
        draftDialogXtraTblPanel = new javax.swing.JPanel();
        draftBanzScroll = new javax.swing.JScrollPane();
        draftMBanzTbl = new com.mycompany.Tables.BanzDraftTbl();
        luDialog = new javax.swing.JDialog();
        luDialogScroll = new javax.swing.JScrollPane();
        luBashoResultsTbl = new com.mycompany.Tables.MatchupTbl();
        draftDialogDrafteePanel = new javax.swing.JPanel();
        masterTab = new javax.swing.JTabbedPane();
        lookUpTabs = new javax.swing.JTabbedPane();
        luPanel = new com.mycompany.sumoproject.LookupPanel();
        muPanel = new com.mycompany.sumoproject.MatchupPanel();
        banzPanel = new com.mycompany.sumoproject.BanzPanel();
        draftTab = new javax.swing.JTabbedPane();
        draftPanel = new javax.swing.JPanel();
        numOfDrafters = new javax.swing.JSpinner();
        numDraftsLbl = new javax.swing.JLabel();
        draftSetupBut = new javax.swing.JButton();
        draftMNum = new javax.swing.JSpinner();
        draftMNumLbl = new javax.swing.JLabel();
        draftJNumLbl = new javax.swing.JLabel();
        draftJNum = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        draftPlayersTbl = new javax.swing.JTable();
        draftType = new javax.swing.JComboBox<>();
        draftTypeLbl = new javax.swing.JLabel();
        draftRandCBox = new javax.swing.JCheckBox();
        draftRandLbl = new javax.swing.JLabel();
        draftPanelNew = new com.mycompany.sumoproject.DraftPanel();

        draftDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        draftDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                draftDialogWindowClosing(evt);
            }
        });
        draftDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        draftsPane.setEnabled(false);
        draftsPane.setPreferredSize(new java.awt.Dimension(150, 200));

        draftersListOrder.setToolTipText("");
        draftersListOrder.addListSelectionListener( new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                draftersListOrder.setSelectedIndex(draftHandler.getDraftPos());
            }
        });
        draftsPane.setViewportView(draftersListOrder);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 7;
        draftDialog.getContentPane().add(draftsPane, gridBagConstraints);

        draftActionScroll.setPreferredSize(new java.awt.Dimension(250, 200));
        draftActionScroll.setViewportView(draftActionList);

        draftActionList.setEditable(false);
        draftActionList.setColumns(20);
        draftActionList.setRows(5);
        draftActionScroll.setViewportView(draftActionList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 7;
        draftDialog.getContentPane().add(draftActionScroll, gridBagConstraints);

        draftReset.setText("resetButton");
        draftReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                draftResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        draftDialog.getContentPane().add(draftReset, gridBagConstraints);

        draftSelectBut.setText("Draft");
        draftSelectBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                draftSelectButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        draftDialog.getContentPane().add(draftSelectBut, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        draftDialog.getContentPane().add(draftCurrDrafterLbl, gridBagConstraints);

        draftDialogXtraTblPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 9;
        draftDialog.getContentPane().add(draftDialogXtraTblPanel, gridBagConstraints);

        draftBanzScroll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        draftMBanzTbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        draftMBanzTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                draftMBanzTblMouseReleased(evt);
            }
        });
        draftBanzScroll.setViewportView(draftMBanzTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        draftDialog.getContentPane().add(draftBanzScroll, gridBagConstraints);

        luDialog.setResizable(false);

        luDialogScroll.setViewportView(luBashoResultsTbl);

        luDialog.getContentPane().add(luDialogScroll, java.awt.BorderLayout.CENTER);

        draftDialogDrafteePanel.setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lookUpTabs.addTab("Lookup", luPanel);
        lookUpTabs.addTab("Matchup", muPanel);

        banzPanel.setYears();
        banzPanel.setBashos();
        lookUpTabs.addTab("Banzuke", banzPanel);

        masterTab.addTab("Query Tools", lookUpTabs);

        java.awt.GridBagLayout draftPanelLayout = new java.awt.GridBagLayout();
        draftPanelLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        draftPanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        draftPanel.setLayout(draftPanelLayout);

        numOfDrafters.setModel(new javax.swing.SpinnerNumberModel(3, 1, 10, 1));
        numOfDrafters.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numOfDraftersStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        draftPanel.add(numOfDrafters, gridBagConstraints);

        numDraftsLbl.setLabelFor(numOfDrafters);
        numDraftsLbl.setText("Number of Drafters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        draftPanel.add(numDraftsLbl, gridBagConstraints);

        draftSetupBut.setText("Set Up Draft");
        draftSetupBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                draftSetupButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 12;
        draftPanel.add(draftSetupBut, gridBagConstraints);

        draftMNum.setModel(new javax.swing.SpinnerNumberModel(5, 1, 21, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        draftPanel.add(draftMNum, gridBagConstraints);

        draftMNumLbl.setLabelFor(draftMNum);
        draftMNumLbl.setText("Number of Makuuchi Wrestlers");
        draftMNumLbl.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        draftPanel.add(draftMNumLbl, gridBagConstraints);

        draftJNumLbl.setLabelFor(draftMNum);
        draftJNumLbl.setText("Number of Juryo Wrestlers");
        draftJNumLbl.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        draftPanel.add(draftJNumLbl, gridBagConstraints);

        draftJNum.setModel(new javax.swing.SpinnerNumberModel(0, 0, 21, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        draftPanel.add(draftJNum, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 275));

        draftPlayersTbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        draftPlayersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Drafter 1"},
                {"Drafter 2"},
                {"Drafter 3"}
            },
            new String [] {
                "Players"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        draftPlayersTbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(draftPlayersTbl);
        if (draftPlayersTbl.getColumnModel().getColumnCount() > 0) {
            draftPlayersTbl.getColumnModel().getColumn(0).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 13;
        draftPanel.add(jScrollPane1, gridBagConstraints);

        draftType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Linear", "Snake" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        draftPanel.add(draftType, gridBagConstraints);

        draftTypeLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        draftTypeLbl.setText("Draft Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        draftPanel.add(draftTypeLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 10;
        draftPanel.add(draftRandCBox, gridBagConstraints);

        draftRandLbl.setLabelFor(draftRandCBox);
        draftRandLbl.setText("Randomized Draft");
        draftRandLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        draftPanel.add(draftRandLbl, gridBagConstraints);

        draftTab.addTab("Draft", draftPanel);

        masterTab.addTab("League Tools", draftTab);
        masterTab.addTab("tab3", draftPanelNew);

        getContentPane().add(masterTab, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Debug button to reset draft status in SQL test table 
     *
     * @param evt
     */
    private void draftResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_draftResetActionPerformed
        try {
            statement.executeUpdate("""
                                    UPDATE 
                                        dbo.drafteeTest
                                    SET drafter = NULL;
                                    """);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        JOptionPane.showMessageDialog(draftDialog, "Draft Reset");
    }//GEN-LAST:event_draftResetActionPerformed
    
      
    /**
     * Draft the selected rikishi to the active drafter's team and update GUI with changes
     * @param evt 
     */
    private void draftSelectButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_draftSelectButActionPerformed
        //TODO need to reconfigure so that anytime I click on some table it gets the select value, not just the DraftBanzMTable
        
        String rikishi;        
        rikishi = draftMBanzTbl.getSelectedValue();    
        if (rikishi == null) {
            JOptionPane.showMessageDialog(draftDialog, "Improper Selection");
            return;
        }
        
        String activeDrafter = draftHandler.getActiveDrafter();
        String rank = null;
        Integer division = null;
        try {
            statement.executeUpdate("""
                                        UPDATE drafteeTest
                                            SET drafter = '%s'
                                        WHERE shikona = '%s';
                                    """.formatted(activeDrafter, rikishi) );
            ResultSet rs = statement.executeQuery("""
                                SELECT 
                                    *,
                                    dbo.ufn_formatRank(rank_name, pos, side, default) AS rank
                                FROM drafteeTest 
                                WHERE shikona = '%s';
                              """.formatted(rikishi));
            while (rs.next()) {
                rank = rs.getString("rank");
                division = rs.getInt("division");
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
            return;
        }
        
//        if (!draftHandler.draftRikishiToTeam(activeDrafter, rikishi, rank, division)) {
//            JOptionPane.showMessageDialog(draftDialog, """
//                                                        You have reached the limit on 
//                                                        drafting wrestlers in division %d
//                                                        """.formatted(division));
//            return;
//        }
        
        draftSelectBut.setEnabled(false);
        updateDraftBoard(activeDrafter);
        draftActionList.insert(draftHandler.getDraftEvent(), 0);
        
        // TODO configure to update the users roster split pane as well
//        updateRoster(name);
//        String curr_user = "Andy";
//        var roster = draftHandler.getPlayerRoster(curr_user);
//        for (int i = 0; i < roster.size(); i++) {
//            rosterModel.insertRow(i, roster.get(i).toArray(String[]::new));
//        }

        draftCurrDrafterLbl.setText(draftHandler.getActiveDrafter());

//        int selectedIndex = draftersListOrder.getSelectedIndex();
//        if (selectedIndex == draftHandler.getDraftOrder().size()) {
//            draftHandler.finishDraft();
//        }
//        else {
//            draftersListOrder.setSelectedIndex( selectedIndex + 1 );
//        }
    }//GEN-LAST:event_draftSelectButActionPerformed

    /**
     * Check that currently selected wrestler is available to be drafted and update
     * draft select button to reflect that status
     * @param evt 
     */
    private void draftMBanzTblMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_draftMBanzTblMouseReleased
        boolean isAvailable = !draftHandler.isRikishiDrafted(draftMBanzTbl.getSelectedValue());
//        draftMBanzTbl.setIsSelectedAvailable(isAvailable);
        draftSelectBut.setEnabled(isAvailable);
    }//GEN-LAST:event_draftMBanzTblMouseReleased
    
    
    /**
     * Window closing handler. Prompts the user if they want to cancel the draft by 
     * closing the window. If cancelled, removes all dynamically created components, 
     * nulls the GUI's {@code draftHandler}, and disposes of the window
     * @param evt 
     */
    private void draftDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_draftDialogWindowClosing
        var pane = JOptionPane.showConfirmDialog(
                draftDialog, 
                "Closing this window will prematurely end the draft, would you like to cancel it?", 
                "Cancel Draft?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        
        if (pane == JOptionPane.YES_OPTION) {
            draftDialogDrafteePanel.removeAll();
            draftDialogXtraTblPanel.removeAll();
            draftHandler = null;
            draftDialog.dispose();
        }
    }//GEN-LAST:event_draftDialogWindowClosing

    
    /** Helper Methods
     * ====================================================================== */
    
    /**
     * Updates the displayed roster table for a given user
     *
     * @param user
     */
    private void updateRoster(String user) {
//        String lookupSql = """
//                           SELECT
//                            *
//                           FROM dbo.drafteeTest
//                           WHERE drafter = '%s';
//                        """.formatted(user);
//
//        try ( ResultSet rs = statement.executeQuery(lookupSql)) {
//            resultToTable(rs, rosterModel, List.of("shikona", "drafter"));
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
    }

    /**
     * INitialize the user roster table
     */
    private void initRosterTbl() {
//        var dim = userRosterTbl.getPreferredSize();
//        dim.setSize(dim.width, 120);
//        userRosterTbl.setPreferredSize(dim);
//        updateRoster("Andy");
//        pack();
    }
        
    /**
     * Initializes the draft dialog window. It first builds the 
     * {@code draftDialogDrafteePanel} with a table for each player of the provided size.
     * 
     * The main top division banzuke table, {@code draftBanzMTbl}, is then initialized. If
     * there are any other divisions in the draft pool, those tables are initialized as 
     * well in the {@code draftDialogXtraTblPanel}. 
     * @param draftHndlr
     * @param divisionSizes 
     */
    private void initDraftDialog(DraftHandler draftHndlr, int[] divisionSizes) {
        // Build teams
        draftMapping = new HashMap<>();
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        int size = draftHndlr.getTeamSize();
        int x_loc = 0;
        int y_loc = 0;
        for (var p : draftHndlr.getPlayers()) {
            gridBagConstraints.gridx = x_loc % 3;
            gridBagConstraints.gridy = y_loc;
            
            javax.swing.JLabel playerLbl = new javax.swing.JLabel(p);
            draftDialogDrafteePanel.add(playerLbl, gridBagConstraints);
            
            var scroll = initDrafterTable(size);

            gridBagConstraints.gridy = y_loc + 1;
            draftDialogDrafteePanel.add(scroll, gridBagConstraints);
            
            draftMapping.put(p, scroll);
            x_loc++;
            if (x_loc % 3 == 0) {
                y_loc += 2;
            }
        }
        
        // Build banzuke Tables to select and draft
        initBanzDraftTbl(draftMBanzTbl, MAKUUCHI);
        
        int tblCnt = 1;
        if (divisionSizes.length > 1) {
            Map<Integer, String> divisionMap = new HashMap<>() {{
                put(1, JURYO);
                put(2, "3");
                put(3, "4");
            }};
            
            for (int div = 1; div < divisionSizes.length; div++) {
                if (divisionSizes[div] == 0) continue;
                
                BanzDraftTbl btbl = new BanzDraftTbl();
                initBanzDraftTbl(btbl, divisionMap.get(div));
                
                gridBagConstraints.gridx = div;
                gridBagConstraints.gridy = 0;
                
                JScrollPane scroll = new JScrollPane();
                scroll.setViewportView(btbl);
                draftDialogXtraTblPanel.add(scroll, gridBagConstraints);
                tblCnt++;
            }
        }
        
        /* Draftee panel is placed later such that the panel can be widened to accomodate 
        for the other divisional tables */
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = tblCnt;
        draftDialog.add(draftDialogDrafteePanel, gridBagConstraints);        

        draftDialog.pack();
        draftDialog.setVisible(true);
     }
    
    /**
     * Fills the draftBanzTbl with the most recent banzuke
     * @param division_options divisional options of what to include
     */
    private void initBanzDraftTbl(BanzDraftTbl bdt, String... division_options) {
        String division = division_options.length == 0 ? ALL_DIVISIONS : division_options[0];
        String banzSql = """
                            SELECT 
                                MAX(basho) as mostRecentBasho 
                            FROM fullResults
                            WHERE division LIKE '%s';
                         """.formatted(division);
        try ( ResultSet rs = statement.executeQuery(banzSql)) {
            String currentBasho = "";
            while (rs.next()) {
                currentBasho = rs.getString("mostRecentBasho");
            }

            List< List<String> > currBanzuke = Helpers.getBanzuke(currentBasho, division);
            bdt.insertRows2(currBanzuke);
            pack();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Initialize a small draft table for an individual player
     * @param totalSize total number of wrestlers
     * @param division_sizes optional number of other divisional wrestlers
     * @return 
     */
    private JScrollPane initDrafterTable(int totalSize, int... division_sizes) {
        // TODO pull this out into its own class

        division_sizes = division_sizes.length == 0 ? new int[]{totalSize} : division_sizes;
        String[] draftHdrs = {
            "Draft#", "Wrestler", "Rank"
        };
        javax.swing.JTable drafter = new javax.swing.JTable(
                new DefaultTableModel( draftHdrs, totalSize )
        );
        
        drafter.setPreferredScrollableViewportSize(
                new java.awt.Dimension(200, (totalSize-1)*20)
        );
       
        JScrollPane scroll = new JScrollPane();
        scroll.setViewportView(drafter);
        return scroll;
    }
    
    /**
     * Given a specific {@code drafter}, update their mini draft board with the newest
     * entry
     * @param drafter 
     */
    private void updateDraftBoard(String drafter) {
        JTable t = (JTable) draftMapping.get(drafter).getViewport().getView();
        var drafterRoster = draftHandler.getPlayerRoster(drafter);
        var values = drafterRoster.get(drafterRoster.size() - 1);
        for (int i = 0; i < values.size(); i++) {
            t.setValueAt(values.get(i), drafterRoster.size() - 1, i);
        }
    }
    
    /**
     * Adjusts the table size according to the value of {@code numOfDrafters}
     * @param evt 
     */
    private void numOfDraftersStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numOfDraftersStateChanged
        int players = (int) numOfDrafters.getValue();
        
        DefaultTableModel tm = (DefaultTableModel) draftPlayersTbl.getModel();
        int rowCnt = draftPlayersTbl.getRowCount();
        while (players > rowCnt) {
            tm.insertRow(rowCnt++, new String[]{"Drafter %d".formatted(players)});
        }
        
        while (players < rowCnt) {
            tm.removeRow(rowCnt - 1);
            rowCnt--;
        }
    }//GEN-LAST:event_numOfDraftersStateChanged
        /**
     * Sets up a draft, using the settings from the draft tab. Creates a {@code draftHandler}
     * and launches a new window with a table, draft order, and rosters
     * 
     * @param evt 
     */
    private void draftSetupButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_draftSetupButActionPerformed
       
        int numDrafters = (int)numOfDrafters.getValue();
        int mNum = (int)draftMNum.getValue();
        
        if ( ( mNum * numDrafters ) > 42 ) {
            JOptionPane.showMessageDialog(getContentPane(), "Too many Makuuchi Wrestlers given number of players");
            return;
        }
        
        int jNum = (int)draftJNum.getValue();
        if ( (jNum * numDrafters ) > 28 ) {
            JOptionPane.showMessageDialog(getContentPane(), "Too many Juryo Wrestlers given number of players");
            return;
        }
        
        int[] divisionSizes = new int[]{(int) draftMNum.getValue(), (int) draftJNum.getValue()};
        
        /* 
        TODO Continuing a draft
        */
        
        List<String> users = new ArrayList<>() {{
            for (int i = 0; i < draftPlayersTbl.getRowCount(); i++) {
                add( (String) draftPlayersTbl.getValueAt(i, 0) );
            }
        }};
        
        draftHandler = new DraftHandler( 
                users, 
                "",
                divisionSizes,
                draftRandCBox.isSelected(),
                (String) draftType.getSelectedItem()
        );
        
        List<String> draftOrder = new ArrayList<>(draftHandler.getDraftOrder());
        for (int i = 0; i < draftOrder.size(); i++) {
            draftOrder.set(i, "%d :: ".formatted(i+1) + draftOrder.get(i));
        }
        draftersListOrder.setListData( draftOrder.toArray(String[]::new) );
        draftersListOrder.setSelectedIndex(0);
        
        initDraftDialog(draftHandler, divisionSizes);
    }//GEN-LAST:event_draftSetupButActionPerformed

    // Swing Variables
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mycompany.sumoproject.BanzPanel banzPanel;
    private javax.swing.JTextArea draftActionList;
    private javax.swing.JScrollPane draftActionScroll;
    private javax.swing.JScrollPane draftBanzScroll;
    private javax.swing.JLabel draftCurrDrafterLbl;
    private javax.swing.JDialog draftDialog;
    private javax.swing.JPanel draftDialogDrafteePanel;
    private javax.swing.JPanel draftDialogXtraTblPanel;
    private javax.swing.JSpinner draftJNum;
    private javax.swing.JLabel draftJNumLbl;
    private com.mycompany.Tables.BanzDraftTbl draftMBanzTbl;
    private javax.swing.JSpinner draftMNum;
    private javax.swing.JLabel draftMNumLbl;
    private javax.swing.JPanel draftPanel;
    private com.mycompany.sumoproject.DraftPanel draftPanelNew;
    private javax.swing.JTable draftPlayersTbl;
    private javax.swing.JCheckBox draftRandCBox;
    private javax.swing.JLabel draftRandLbl;
    private javax.swing.JButton draftReset;
    private javax.swing.JButton draftSelectBut;
    private javax.swing.JButton draftSetupBut;
    private javax.swing.JTabbedPane draftTab;
    private javax.swing.JComboBox<String> draftType;
    private javax.swing.JLabel draftTypeLbl;
    private javax.swing.JList<String> draftersListOrder;
    private javax.swing.JScrollPane draftsPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane lookUpTabs;
    private com.mycompany.Tables.MatchupTbl luBashoResultsTbl;
    private javax.swing.JDialog luDialog;
    private javax.swing.JScrollPane luDialogScroll;
    private com.mycompany.sumoproject.LookupPanel luPanel;
    private javax.swing.JTabbedPane masterTab;
    private com.mycompany.sumoproject.MatchupPanel muPanel;
    private javax.swing.JLabel numDraftsLbl;
    private javax.swing.JSpinner numOfDrafters;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    // SQL Private Variables
    Connection connection;
    Statement statement;
    
    private DraftHandler draftHandler;
    private Map<String, JScrollPane> draftMapping;
    
    private final String ALL_DIVISIONS = "[0-9]";
    private final String MAKUUCHI = "1";
    private final String JURYO = "2";
}
